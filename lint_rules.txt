# 한복 가상 피팅 프로젝트 - 커스텀 린트 규칙

## 프로젝트에 적용된 커스텀 린트 규칙
이 프로젝트는 다음과 같은 커스텀 린트 규칙을 사용합니다:

```yaml
linter:
  rules:
    # 한국어 주석 허용 및 프로젝트 맞춤 규칙
    prefer_const_constructors: true  # const 생성자 사용 권장
    avoid_print: false  # print 문 사용 허용
    prefer_single_quotes: true  # 작은따옴표 사용 권장
    always_specify_types: false  # 변수 타입 명시 강제 안 함
    use_key_in_widget_constructors: false  # 위젯 생성자에 key 매개변수 필수 여부 비활성화
    avoid_web_libraries_in_flutter: false  # 웹 라이브러리 사용 허용 (크로스플랫폼 지원용)
    require_trailing_commas: false  # 끝에 콤마 필수 여부 비활성화
    depend_on_referenced_packages: false  # 참조된 패키지에 의존성 필수 여부 비활성화
    library_private_types_in_public_api: false  # 공개 API에 비공개 타입 사용 허용

analyzer:
  # 린트 무시할 파일 패턴 지정
  exclude:
    - "**/*.g.dart"  # 자동 생성 파일 제외
    - "**/*.freezed.dart"  # freezed 자동 생성 파일 제외
    - "lib/generated_plugin_registrant.dart"  # 플러그인 등록 파일 제외
  
  # 오류 처리 수준 조정
  errors:
    invalid_assignment: warning  # 잘못된 할당을 경고로 처리
    missing_return: warning  # 반환값 누락을 경고로 처리
    dead_code: info  # 도달할 수 없는 코드를 정보로 처리
    todo: ignore  # TODO 주석을 무시
```

## 린트 규칙 무시 방법

특정 파일에서 린트 규칙을 무시하려면:
```dart
// ignore_for_file: rule_name
```

특정 라인에서 린트 규칙을 무시하려면:
```dart
int example = 0; // ignore: rule_name
```

## 프로젝트 전체 분석 실행

린트 규칙에 따라 전체 프로젝트를 분석하려면:
```
flutter analyze
```

## 자동 수정 실행 (가능한 경우)

일부 린트 문제를 자동으로 수정하려면:
```
dart fix --apply
``` 